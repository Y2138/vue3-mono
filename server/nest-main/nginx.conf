events {
    worker_connections 1024;
}

http {
    # 基本配置
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # 性能优化
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # 速率限制
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # 上游服务器
    upstream nest_backend {
        server nest-app:3000;
        keepalive 32;
    }
    
    # HTTP 服务器配置
    server {
        listen 80;
        server_name _;
        
        # 安全头
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # 健康检查端点（不限流）
        location /health {
            proxy_pass http://nest_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 健康检查超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # API 端点（限流）
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://nest_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
        }
        
        # 认证端点（严格限流）
        location ~ ^/(auth|login|register) {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://nest_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 默认代理所有其他请求
        location / {
            proxy_pass http://nest_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # 静态文件缓存
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # 阻止敏感文件访问
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 阻止常见攻击路径
        location ~ (\.sql|\.env|\.git|composer\.|package\.json|yarn\.lock) {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # 监控端点（内部访问）
    server {
        listen 8080;
        server_name localhost;
        
        # Nginx 状态
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;  # 仅允许容器网络访问
            deny all;
        }
        
        # 应用指标
        location /metrics {
            proxy_pass http://nest_backend/metrics;
            allow 172.20.0.0/16;  # 仅允许容器网络访问
            deny all;
        }
    }
}

# gRPC 代理配置（实验性功能）
# 注意：需要 nginx 1.13.10+ 且编译时包含 --with-http_v2_module
stream {
    # 上游 gRPC 服务器
    upstream grpc_backend {
        server nest-app:50051;
    }
    
    # gRPC 代理
    server {
        listen 50051 http2;
        proxy_pass grpc_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/grpc.log;
    }
} 