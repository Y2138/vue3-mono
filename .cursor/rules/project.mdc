---
description: Vue3 + NestJS 全栈 TypeScript Monorepo 项目规则
alwaysApply: false
---
# 项目概览

这是一个现代化的全栈 TypeScript monorepo 项目，采用前后端分离架构，支持企业级应用开发。

## 技术架构

### 前端技术栈
- **框架**: Vue 3.5.18+ (Composition API，响应式解构赋值稳定版)
- **构建工具**: Vite 6.1+ (极速 HMR，Environment API 实验支持)
- **UI 组件库**: Naive UI 2.41+ (按需引入)
- **CSS 框架**: UnoCSS 0.65+ (原子化 CSS)
- **状态管理**: Pinia 2.3+ (轻量型状态管理)
- **HTTP 客户端**: Axios 1.7+ (封装请求拦截器)
- **路由**: Vue Router 4.5+
- **PWA**: vite-plugin-pwa (Service Worker 支持)
- **动画**: motion-v 0.13+ (动画库)
- **工具库**: @vueuse/core 13+ (Vue 组合式工具集)

### 后端技术栈
- **框架**: NestJS 11+ (模块化架构)
- **API**: GraphQL + Apollo Server 3.13+
- **数据库**: PostgreSQL + TypeORM 0.3+
- **认证**: JWT + Passport
- **授权**: RBAC (基于角色的访问控制)
- **缓存**: Redis + cache-manager
- **加密**: bcryptjs (密码哈希)
- **支付**: Stripe 18+ + Alipay SDK 4.13+

### 开发工具链
- **包管理**: pnpm workspace (monorepo)
- **构建**: Turbo 2.2+ (构建加速)
- **代码规范**: Biome 1.9+ (代码格式化和检查)
- **类型检查**: TypeScript 5.7+/4.5.5
- **测试**: Vitest 2.1+ + Jest 29.7+
- **Node 版本**: 20.19.1 LTS (Volta 管理)

## 项目结构

```
vue3-mono/
├── apps/                           # 应用目录
│   └── naive-admin/               # 前端管理后台
│       ├── src/
│       │   ├── assets/            # 静态资源
│       │   ├── components/        # 公共组件
│       │   │   ├── dForm/         # 动态表单组件
│       │   │   ├── searchPanel/   # 搜索面板组件
│       │   │   ├── wrapRow/       # 布局组件
│       │   │   └── overflowDecorate/  # 溢出装饰组件
│       │   ├── hooks/             # Vue 组合式函数
│       │   ├── layouts/           # 布局模板
│       │   ├── request/           # API 请求封装
│       │   ├── router/            # 路由配置
│       │   ├── store/             # 状态管理
│       │   ├── types/             # 全局类型定义
│       │   ├── utils/             # 工具函数
│       │   └── views/             # 页面组件
│       ├── vite.config.ts         # Vite 配置
│       └── package.json
├── server/                        # 服务端目录
│   └── nest-main/                # NestJS 后端服务
│       ├── src/
│       │   ├── modules/           # 业务模块
│       │   │   ├── users/         # 用户模块
│       │   │   └── rbac/          # 权限管理模块
│       │   ├── config/            # 配置管理
│       │   ├── common/            # 公共组件
│       │   ├── migrations/        # 数据库迁移
│       │   └── utils/             # 工具函数
│       └── package.json
├── packages/                      # 共享包目录
│   ├── components/                # 公共组件库
│   ├── share/                     # 共享工具和类型
│   └── sw/                        # Service Worker
├── configs/                       # 配置包
│   ├── tsconfig/                  # TypeScript 配置
│   ├── rsbuild/                   # Rsbuild 配置
│   └── unbuild/                   # Unbuild 配置
├── pnpm-workspace.yaml           # pnpm workspace 配置
└── package.json                   # 根配置文件
```

## 核心组件和功能

### 前端核心组件

#### 1. dForm 动态表单系统
- **路径**: `apps/naive-admin/src/components/dForm/`
- **功能**: 配置化表单生成，支持多种输入类型
- **组件**: root.vue (根组件) + item.vue (表单项)
- **支持组件**: n-input, n-select, d-date-picker, d-radio, d-checkbox, n-input-number

#### 2. SearchPanel 搜索面板
- **路径**: `apps/naive-admin/src/components/searchPanel/`
- **功能**: 列表页搜索表单，支持内联和块级布局
- **特性**: 查询、重置按钮，自动更新搜索

#### 3. WrapRow/WrapCol 布局组件
- **路径**: `apps/naive-admin/src/components/wrapRow/`
- **功能**: 响应式网格布局系统
- **特性**: 自适应列数，内容宽度控制

#### 4. 请求系统
- **路径**: `apps/naive-admin/src/request/axios.ts`
- **功能**: 统一的 HTTP 请求封装
- **特性**: 
  - 请求/响应拦截器
  - 自动错误处理
  - 取消重复请求
  - JWT 认证集成
  - 重试机制

### 后端核心模块

#### 1. 用户认证模块 (Users)
- **路径**: `server/nest-main/src/modules/users/`
- **功能**: 用户注册、登录、JWT 认证
- **实体**: User (用户实体)
- **服务**: AuthService (认证服务)

#### 2. RBAC 权限模块
- **路径**: `server/nest-main/src/modules/rbac/`
- **功能**: 基于角色的访问控制
- **实体**: Role (角色)、Permission (权限)
- **特性**: 权限装饰器、权限守卫

## 开发规范

### 命名约定
- **目录**: 小写字母 + 横杠 (kebab-case)
- **变量**: 驼峰命名法 (camelCase)
- **常量**: 大写字母 + 下划线 (UPPER_SNAKE_CASE)
- **组件**: PascalCase
- **函数**: 纯函数用 function，其他用 const

### TypeScript 规范
- 优先使用 interface 而非 type
- 避免使用 enum，用联合类型代替
- 泛型变量语义化: T(Type), K(Key), V(Value), E(Element)
- 严格模式开启，类型安全优先

### 代码风格
- **import 顺序**: Vue 相关库 → 第三方库 → 项目 JS/TS → Vue 组件 → 类型文件
- **函数参数**: 最多 3 个，超出使用对象聚合
- **响应式数据**: 使用 Composition API

### API 请求规范
- 统一使用封装的 `get<Q, R>()` 和 `post<Q, R>()` 方法
- 返回格式: `Promise<[ResResult<R>, null] | [null, any]>`
- 错误处理: 统一通过拦截器处理
- 类型安全: 请求和响应都需要类型定义

### 组件开发规范
- **表单**: 优先使用 dForm 组件系统
- **列表**: 基于 useTablePage 钩子实现
- **布局**: 使用 WrapRow/WrapCol 响应式布局
- **搜索**: 使用 SearchPanel 组件

## 环境和配置

### 开发环境
- **Node.js**: 20.19.1 LTS (Volta 管理)
- **包管理器**: pnpm workspace
- **开发服务器**: 
  - 前端: http://localhost:6767
  - 后端: http://localhost:3000
- **数据库**: PostgreSQL
- **缓存**: Redis

### 构建和部署
- **前端构建**: Vite build
- **后端构建**: NestJS build
- **PWA**: 支持 Service Worker
- **代理配置**: `/api` 代理到后端服务

### 质量保证
- **代码检查**: Biome (格式化 + 检查)
- **类型检查**: TypeScript 严格模式
- **测试**: Vitest (前端) + Jest (后端)
- **Git hooks**: 提交前自动检查

## 最佳实践

### 前端开发
1. 优先使用 Composition API
2. 状态管理使用 Pinia
3. 组件通信通过 props/emits
4. 路由使用 Vue Router 4+
5. 样式使用 UnoCSS 原子化类名

### 后端开发
1. 模块化设计，单一职责
2. 使用装饰器进行元数据标注
3. GraphQL 优先，REST 作为补充
4. 统一错误处理和日志记录
5. 数据库操作使用 TypeORM

### 性能优化
1. 前端组件按需导入
2. 路由懒加载
3. 接口响应缓存
4. 图片资源优化
5. Bundle 分包策略

## 扩展指南

### 添加新页面
1. 在 `src/views/` 创建页面组件
2. 在 `src/router/modules/` 添加路由配置
3. 如需权限控制，配置相应的权限标识

### 添加新组件
1. 在 `src/components/` 创建组件
2. 编写对应的类型定义
3. 导出到 `index.ts` 供全局使用

### 添加新 API
1. 在 `src/request/api/` 定义接口函数
2. 定义请求和响应的 TypeScript 类型
3. 在业务组件中使用 composable 封装

### 后端模块扩展
1. 创建新的模块目录
2. 定义实体、DTO、服务、解析器
3. 在 app.module.ts 中注册模块
